{
    "link_dict": {
        "[img1]": "https://img2024.cnblogs.com/blog/35695/202412/35695-20241201073014811-1847930772.jpg",
        "[2]": "https://www.doubao.com?channel=cnblogs&type=lunt&theme=bianc",
        "[3]": "https://www.cnblogs.com/",
        "[4]": "https://cnblogs.vip/",
        "[5]": "https://cnblogs.vip/store",
        "[6]": "https://news.cnblogs.com/",
        "[7]": "https://q.cnblogs.com/",
        "[8]": "https://ing.cnblogs.com/",
        "[9]": "https://www.cnblogs.com/cmt/p/18341478",
        "[10]": "https://chat2db-ai.com/",
        "[img11]": "https://assets.cnblogs.com/icons/newpost.svg",
        "[12]": "https://i.cnblogs.com/EditPosts.aspx?opt=1",
        "[img13]": "https://assets.cnblogs.com/icons/myblog.svg",
        "[14]": "https://passport.cnblogs.com/GetBlogApplyStatus.aspx",
        "[img15]": "https://assets.cnblogs.com/icons/message.svg",
        "[16]": "https://msg.cnblogs.com/",
        "[img17]": "https://assets.cnblogs.com/icons/avatar-default.svg",
        "[18]": "https://home.cnblogs.com/",
        "[19]": "https://passport.cnblogs.com/GetBlogApplyStatus.aspx",
        "[20]": "https://home.cnblogs.com/",
        "[21]": "https://account.cnblogs.com/settings/account",
        "[22]": "https://vip.cnblogs.com/my",
        "[23]": "https://account.cnblogs.com/signup",
        "[img24]": "https://www.cnblogs.com/skins/custom/images/logo.gif",
        "[25]": "https://www.cnblogs.com/yunqishequ/",
        "[26]": "https://www.cnblogs.com/yunqishequ",
        "[27]": "https://www.cnblogs.com/",
        "[28]": "https://www.cnblogs.com/yunqishequ/",
        "[29]": "https://i.cnblogs.com/EditPosts.aspx?opt=1",
        "[30]": "https://msg.cnblogs.com/send/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E6%A0%96%E5%8F%B7",
        "[31]": "https://i.cnblogs.com/",
        "[32]": "https://www.cnblogs.com/yunqishequ/p/18209013",
        "[33]": "https://pic1.zhimg.com/80/v2-e18304409f47b64c19c1aef03d2fa22c_720w.webp",
        "[34]": "https://link.zhihu.com/?target=http%3A%2F%2Fsca.aliyun.com",
        "[35]": "https://pic4.zhimg.com/80/v2-4519d4f04c770e7b4823d99f6ee5b02f_720w.webp",
        "[36]": "http://localhost:8080/ai/example_",
        "[37]": "https://link.zhihu.com/?target=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fdashscope%2Fdeveloper-reference%2Factivate-dashscope-and-create-an-api-key%3Fspm%3Da2c6h.13046898.publish-article.7.644f6ffaPHpiv1",
        "[38]": "https://help.aliyun.com/zh/dashscope/developer-reference/activate-dashscope-and-create-an-api-key",
        "[39]": "https://link.zhihu.com/?target=https%3A%2F%2Fdocs.spring.io%2Fspring-ai%2Freference%2F0.8-SNAPSHOT%2Findex.html%3Fspm%3Da2c6h.13046898.publish-article.9.644f6ffaPHpiv1",
        "[40]": "https://link.zhihu.com/?target=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fdashscope%2F%3Fspm%3Da2c6h.13046898.publish-article.10.644f6ffaPHpiv1",
        "[41]": "https://link.zhihu.com/?target=https%3A%2F%2Fgithub.com%2Falibaba%2Fspring-cloud-alibaba%2Ftree%2F2023.x%2Fspring-cloud-alibaba-examples%2Fspring-cloud-ai-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fai%2Fexample%2Ftongyi%2Fservice%2Fimpl%2Fhelloworld%3Fspm%3Da2c6h.13046898.publish-article.11.644f6ffaPHpiv1",
        "[42]": "https://link.zhihu.com/?target=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1498189%3Futm_content%3Dg_1000393870",
        "[43]": "https://www.cnblogs.com/yunqishequ/tag/AI/",
        "[44]": "https://www.cnblogs.com/yunqishequ/tag/Java/",
        "[45]": "https://www.cnblogs.com/yunqishequ/tag/Spring/",
        "[img46]": "https://pic.cnblogs.com/face/1482139/20210107133955.png",
        "[47]": "https://home.cnblogs.com/u/yunqishequ/",
        "[48]": "https://home.cnblogs.com/u/yunqishequ/",
        "[49]": "https://home.cnblogs.com/u/yunqishequ/followers/",
        "[50]": "https://home.cnblogs.com/u/yunqishequ/followees/",
        "[51]": "https://cnblogs.vip/",
        "[52]": "https://www.cnblogs.com/yunqishequ/p/18206386",
        "[53]": "https://www.cnblogs.com/yunqishequ/p/18206386",
        "[54]": "https://www.cnblogs.com/yunqishequ/p/18224795",
        "[55]": "https://www.cnblogs.com/yunqishequ/p/18224795",
        "[56]": "https://www.cnblogs.com/yunqishequ",
        "[57]": "https://www.cnblogs.com/",
        "[58]": "http://www.uccpsoft.com/index.htm",
        "[59]": "https://www.trae.com.cn/",
        "[60]": "https://www.cnblogs.com/cmt/p/18669224",
        "[61]": "http://ishell.cc/",
        "[img62]": "https://img2024.cnblogs.com/blog/35695/202412/35695-20241201072501456-2052907165.jpg",
        "[63]": "https://www.doubao.com?channel=cnblogs&type=lunt&theme=bianc",
        "[64]": "https://www.cnblogs.com/yunqishequ/p/16889679.html",
        "[65]": "https://www.cnblogs.com/yunqishequ/p/15765813.html",
        "[66]": "https://www.cnblogs.com/alisystemsoftware/p/18166296",
        "[67]": "https://www.cnblogs.com/zlt2000/p/18654758",
        "[68]": "https://www.cnblogs.com/xiezhr/p/18251683",
        "[69]": "https://www.cnblogs.com/lindexi/p/18847625",
        "[70]": "https://docs.spring.io/spring-ai/reference/0.8-SNAPSHOT/index.html",
        "[71]": "https://help.aliyun.com/zh/dashscope/",
        "[72]": "https://github.com/alibaba/spring-cloud-alibaba/tree/2023.x/spring-cloud-alibaba-examples/spring-cloud-ai-example/src/main/java/com/alibaba/cloud/ai/example/tongyi/service/impl/helloworld",
        "[73]": "https://www.cnblogs.com/Evsward/p/18847893",
        "[74]": "https://www.cnblogs.com/youzhibing/p/18848244",
        "[75]": "https://www.cnblogs.com/FreeSql/p/18847880",
        "[76]": "https://www.cnblogs.com/yunqishequ/p/16301486.html",
        "[77]": "https://www.cnblogs.com/yunqishequ/p/16301075.html",
        "[78]": "https://www.cnblogs.com/yunqishequ/p/16300891.html",
        "[79]": "https://www.cnblogs.com/yunqishequ/p/16300494.html",
        "[80]": "https://www.cnblogs.com/yunqishequ/p/16300202.html",
        "[81]": "https://www.cnblogs.com/deali/p/18848662",
        "[82]": "https://home.cnblogs.com/u/yunqishequ/",
        "[83]": "https://home.cnblogs.com/u/yunqishequ/",
        "[84]": "https://home.cnblogs.com/u/yunqishequ/followers/",
        "[85]": "https://home.cnblogs.com/u/yunqishequ/followees/",
        "[86]": "https://www.cnblogs.com/yunqishequ/p/",
        "[87]": "https://www.cnblogs.com/yunqishequ/MyComments.html",
        "[88]": "https://www.cnblogs.com/yunqishequ/OtherPosts.html",
        "[89]": "https://www.cnblogs.com/yunqishequ/comments",
        "[90]": "https://www.cnblogs.com/yunqishequ/tag/",
        "[91]": "https://www.cnblogs.com/yunqishequ/tag/",
        "[92]": "https://www.cnblogs.com/yunqishequ/tag/%E4%BA%91%E5%8E%9F%E7%94%9F/",
        "[93]": "https://www.cnblogs.com/yunqishequ/tag/Java/",
        "[94]": "https://www.cnblogs.com/yunqishequ/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",
        "[95]": "https://www.cnblogs.com/yunqishequ/tag/%E4%BA%91%E8%AE%A1%E7%AE%97/",
        "[96]": "https://www.cnblogs.com/yunqishequ/tag/%E8%BF%90%E7%BB%B4/",
        "[97]": "https://www.cnblogs.com/yunqishequ/tag/Serverless/",
        "[98]": "https://www.cnblogs.com/yunqishequ/tag/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/",
        "[99]": "https://www.cnblogs.com/yunqishequ/tag/%E9%98%BF%E9%87%8C%E4%BA%91/",
        "[100]": "https://www.cnblogs.com/yunqishequ/tag/%E6%9E%B6%E6%9E%84/",
        "[101]": "https://www.cnblogs.com/yunqishequ/tag/%E5%A4%A7%E6%95%B0%E6%8D%AE/",
        "[102]": "https://www.cnblogs.com/yunqishequ/tag/",
        "[103]": "https://www.cnblogs.com/yunqishequ/p/archive/2024/05",
        "[104]": "https://www.cnblogs.com/yunqishequ/p/archive/2024/04",
        "[105]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/11",
        "[106]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/10",
        "[107]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/09",
        "[108]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/08",
        "[109]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/07",
        "[110]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/06",
        "[111]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/05",
        "[112]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/04",
        "[113]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/03",
        "[114]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/02",
        "[115]": "https://www.cnblogs.com/yunqishequ/p/archive/2022/01",
        "[116]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/12",
        "[117]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/11",
        "[118]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/10",
        "[119]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/09",
        "[120]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/08",
        "[121]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/07",
        "[122]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/06",
        "[123]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/05",
        "[124]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/04",
        "[125]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/03",
        "[126]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/02",
        "[127]": "https://www.cnblogs.com/yunqishequ/p/archive/2021/01",
        "[128]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/12",
        "[129]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/11",
        "[130]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/10",
        "[131]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/09",
        "[132]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/08",
        "[133]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/07",
        "[134]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/06",
        "[135]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/05",
        "[136]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/04",
        "[137]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/03",
        "[138]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/02",
        "[139]": "https://www.cnblogs.com/yunqishequ/p/archive/2020/01",
        "[140]": "https://www.cnblogs.com/yunqishequ/p/archive/2019/12",
        "[141]": "https://www.cnblogs.com/yunqishequ/p/archive/2019/11",
        "[142]": "https://www.cnblogs.com/yunqishequ/p/archive/2019/10",
        "[143]": "https://www.cnblogs.com/yunqishequ/p/archive/2019/09",
        "[144]": "https://www.cnblogs.com/yunqishequ/p/archive/2019/03",
        "[145]": "https://www.cnblogs.com/yunqishequ/p/archive/2019/02",
        "[146]": "https://www.cnblogs.com/yunqishequ/p/archive/2019/01",
        "[147]": "https://www.cnblogs.com/yunqishequ/p/archive/2018/12",
        "[148]": "https://www.cnblogs.com/yunqishequ/p/archive/2018/11",
        "[149]": "https://www.cnblogs.com/yunqishequ/most-viewed",
        "[150]": "https://www.cnblogs.com/yunqishequ/p/9999591.html",
        "[151]": "https://www.cnblogs.com/yunqishequ/p/9994195.html",
        "[152]": "https://www.cnblogs.com/yunqishequ/p/10006890.html",
        "[153]": "https://www.cnblogs.com/yunqishequ/p/10025940.html",
        "[154]": "https://www.cnblogs.com/yunqishequ/p/11798682.html",
        "[155]": "https://www.cnblogs.com/yunqishequ/most-commented",
        "[156]": "https://www.cnblogs.com/yunqishequ/p/10244191.html",
        "[157]": "https://www.cnblogs.com/yunqishequ/p/12981112.html",
        "[158]": "https://www.cnblogs.com/yunqishequ/p/10489704.html",
        "[159]": "https://www.cnblogs.com/yunqishequ/p/10209142.html",
        "[160]": "https://www.cnblogs.com/yunqishequ/p/9994195.html",
        "[161]": "https://www.cnblogs.com/yunqishequ/most-liked",
        "[162]": "https://www.cnblogs.com/yunqishequ/p/14115706.html",
        "[163]": "https://www.cnblogs.com/yunqishequ/p/10272294.html",
        "[164]": "https://www.cnblogs.com/yunqishequ/p/10244191.html",
        "[165]": "https://www.cnblogs.com/yunqishequ/p/10168748.html",
        "[166]": "https://www.cnblogs.com/yunqishequ/p/18180093",
        "[167]": "https://www.cnblogs.com/yunqishequ/comments",
        "[168]": "https://www.cnblogs.com/yunqishequ/p/18155481",
        "[169]": "https://www.cnblogs.com/yunqishequ/p/16735503.html",
        "[170]": "https://www.cnblogs.com/yunqishequ/p/14681329.html",
        "[171]": "https://www.cnblogs.com/yunqishequ/p/14392197.html",
        "[172]": "https://www.cnblogs.com/yunqishequ/p/16543654.html",
        "[173]": "https://www.trae.com.cn/"
    },
    "links_part": [
        "to_be_recognized_by_visual_llm§[2]\n  * 开发者的网上家园 - [3]\n  * 会员[4]\n  * 周边[5]\n  * 新闻[6]\n  * 博问[7]\n  * 闪存[8]\n  * 赞助商[9]\n  * Chat2DB[10]\n\n\n  * §搜索 搜索\n    * 搜索\n所有博客\n    * 搜索\n当前博客\n  * 写随笔[12] 我的博客[14] 短消息[16] javascript:void\\(0\\) \"简洁模式启用，您在访问他人博客时会使用简洁款皮肤展示 - 简洁模式\n用户头像[18]\n我的博客[19] 我的园子[20] 账号设置[21] 会员中心[22] javascript:void\\(0\\) \"简洁模式会使用简洁款皮肤显示所有博客 - 简洁模式 ... javascript:void\\(0\\) - 退出登录\n注册[23] javascript:void\\(0\\); - 登录\n\n\n返回主页[25]\n",
        " 阿里云云栖社区[26]\n  * 博客园[27]\n  * 首页[28]\n  * 新随笔[29]\n  * 联系[30]\n  * javascript:void\\(0\\) - 订阅\n  * 管理[31]\n\n\n随笔 - 2584  文章 - 6  评论 - 39  阅读 -  107万\n",
        "Spring Cloud Alibaba AI 简介\nSpring Cloud Alibaba AI 目前基于 Spring AI 0.8.11]版本 API 完成通义系列大模型的接入。通义接入是基于阿里云灵积模型服务[2]，灵积模型服务建立在“模型即服务”（Model-as-a-Service，MaaS）的理念基础之上，围绕 AI 各领域模型，通过标准化的API提供包括模型推理、模型微调训练在内的多种模型服务。\n在当前最新版本中，Spring Cloud Alibaba AI 主要完成了几种常见生成式模型的适配，包括对话、文生图、文生语音等，开发者可以使用 Spring Cloud Alibaba AI 开发基于通义的聊天、图片或语音生成 AI 应用，框架还提供 OutParser、Prompt Template、Stuff 等实用能力。\n以下是当前官方提供的 Spring Cloud Alibaba AI 应用开发示例，访问  _[http:// sca.aliyun.com[34] _可查看。\n  * 聊天对话应用\n  * 文生图应用\n  * 文生语音应用\n  * 模型输出解析OutputParser（实现从 String 到自动 POJO 映射）\n  * 使用 Prompt Template\n  * 让 AI 模型接入外部数据（Prompt Stuff）\n\n\n#",
        "申请通义API-KEY\n为使示例能够正常接入通义大模型，需要在阿里云开通 DashScope 灵积模型服务，申请有效的 API-KEY 并更新到应用配置文件。具体操作步骤可参见如下文档： _[38][37]_\n#",
        "未来规划\n当前版本 Spring Cloud Alibaba AI 主要完成了几种常见生成式模型适配，包括对话、文生图、文生语音等。接下来的版本中，我们将继续完成 VectorStore、Embedding、ETL Pipeline 等更多适配，简化 RAG 等更多 AI 应用开发场景。\n\n相关链接：\n1] Spring AI 0.8.1\n_[[70][39]_\n2] 灵积模型服务\n_[[71][40]_\n3] 完整示例源码\n_[[72][41]_\n**原文链接[42]**\n**本文为阿里云原创内容，未经允许不得转载。**\n标签: AI[43] , Java[44] , Spring[45]\njavascript:void\\(0\\); - 好文要顶 javascript:void\\(0\\); - 关注我 javascript:void\\(0\\); - 收藏该文 javascript:void\\(0\\); - 微信分享\n§to_be_recognized_by_visual_llm§[47]\n阿里云云栖号[48]   \n粉丝 - 136[49] 关注 - 0[50]  \n\njavascript:void\\(0\\); - +加关注\n0\n1\n升级成为会员[51]\n«[52] 上一篇： 发布于 2024-05-22 15:33 - 无需重新学习，使用 Kibana 查询/可视化 SLS 数据[53]   \n»[54] 下一篇： 发布于 2024-05-31 16:24 - 基于对比稀疏扰动技术的时间序列解释框架 ContraLSP[55]\nposted @ 2024-05-23 17:17 阿里云云栖号[56] 阅读(306) 评论(0) javascript:void\\(0\\) - 收藏 javascript:void\\(0\\) - 举报\n刷新页面返回顶部\n登录后才能查看或发表评论，立即 javascript:void\\(0\\); - 登录 或者 逛逛[57] 博客园首页 \n【推荐】100%开源！大型工业跨平台软件C++源码提供，建模，组态！[58]  \n【推荐】国内首个AI IDE，深度理解中文开发场景，立即下载体验Trae[59]  \n【推荐】凌霞软件回馈社区，携手博客园推出1Panel与Halo联合会员[60]  \n【推荐】轻量又高性能的 SSH 工具 IShell：AI 加持，快人一步[61]  \n\n§to_be_recognized_by_visual_llm§[63]\n**相关博文：**  \n\n·  「开源人说」|AI普惠，阿里灵杰开源历程与思考[64]\n·  Spring官方RSocket Broker 0.3.0发布： 快速构建你的RSocket架构[65]\n·  Spring AI 抢先体验，5 分钟玩转 Java AI 应用开发[66]\n·  Spring Cloud Alibaba AI 入门与实践[67]\n·  阿里也出手了！Spring CloudAlibaba AI问世了[68]\n**阅读排行：**   \n· dotnet 9 通过 AppHostRelativeDotNet 指定自定义的运行时路径[69]   \n· [一次小而美的重构：使用 C",
        "在 Avalonia 中生成真正好看的词云]([81])   \n· AI Agent离我们有多远？认知革命的开始（上篇）[73]   \n· 记一次SQL隐式转换导致精度丢失问题的排查 → 不规范就踩坑[74]   \n· 物流规划、仓储自动化和算法调度的问题分析[75]   \n\n**历史上的今天：**   \n2022-05-23 解决方案｜致拓T8数字化ERP[76]   \n2022-05-23 如何使用阿里云 CDN 对部署在函数计算上的静态网站进行缓存[77]   \n2022-05-23 “晕乎乎的概念”：阿里云函数计算的“应用”又是个啥[78]   \n2022-05-23 全面提升易用性：OpenClusterManagement 0.7 版本发布[79]   \n2022-05-23 云钉一体：EventBridge 联合钉钉连接器打通云钉生态[80]   \n\n##",
        " 常用链接 \n  * 我的博客的随笔列表 - 我的随笔[86]\n  * 我的发表过的评论列表 - 我的评论[87]\n  * 我评论过的随笔列表 - 我的参与[88]\n  * 我的博客的评论列表 - 最新评论[89]\n  * 我的博客的标签列表 - 我的标签[90]\n\n\n##",
        "我的标签[91]\n  * 云原生(217)[92]\n  * Java(165)[93]\n  * 数据库(139)[94]\n  * 云计算(107)[95]\n  * 运维(102)[96]\n  * Serverless(74)[97]\n  * 人工智能(72)[98]\n  * 阿里云(60)[99]\n  * 架构(46)[100]\n  * 大数据(43)[101]\n  * 更多[102]\n\n\n##",
        " 随笔档案 \n  * 2024年5月(11)[103]\n  * 2024年4月(7)[104]\n  * 2022年11月(52)[105]\n  * 2022年10月(12)[106]\n  * 2022年9月(98)[107]\n  * 2022年8月(106)[108]\n  * 2022年7月(96)[109]\n  * 2022年6月(83)[110]\n  * 2022年5月(97)[111]\n  * 2022年4月(103)[112]\n  * 2022年3月(130)[113]\n  * 2022年2月(76)[114]\n  * 2022年1月(104)[115]\n  * 2021年12月(106)[116]\n  * 2021年11月(102)[117]\n  * 2021年10月(86)[118]\n  * 2021年9月(101)[119]\n  * 2021年8月(105)[120]\n  * 2021年7月(102)[121]\n  * 2021年6月(96)[122]\n  * 2021年5月(94)[123]\n  * 2021年4月(107)[124]\n  * 2021年3月(85)[125]\n  * 2021年2月(68)[126]\n  * 2021年1月(69)[127]\n  * 2020年12月(23)[128]\n  * 2020年11月(23)[129]\n  * 2020年10月(20)[130]\n  * 2020年9月(19)[131]\n  * 2020年8月(20)[132]\n  * 2020年7月(22)[133]\n  * 2020年6月(21)[134]\n  * 2020年5月(20)[135]\n  * 2020年4月(24)[136]\n  * 2020年3月(40)[137]\n  * 2020年2月(21)[138]\n  * 2020年1月(13)[139]\n  * 2019年12月(22)[140]\n  * 2019年11月(21)[141]\n  * 2019年10月(15)[142]\n  * 2019年9月(18)[143]\n  * 2019年3月(12)[144]\n  * 2019年2月(10)[145]\n  * 2019年1月(26)[146]\n  * 2018年12月(40)[147]\n  * 2018年11月(56)[148]\n  * javascript:void\\(0\\) - 更多\n\n\n##",
        " 阅读排行榜[149]\n  * 1. 10分钟学会使用YOLO及Opencv实现目标检测（下）|附源码(11056)[150]\n  * 2. 一文带你学会使用YOLO及Opencv完成图像及视频流目标检测（上）|附源码(10765)[151]\n  * 3. 机器学习基础：(Python)训练集测试集分割与交叉验证(10234)[152]\n  * 4. Python数据可视化的四种简易方法(7625)[153]\n  * 5. Nacos 常见问题及解决方法(7324)[154]\n\n\n##",
        " 评论排行榜[155]\n  * 1. 12亿行代码，阿里巴巴这一年的技术报告和梦想报告(4)[156]\n  * 2. 终于要跟大家见面了，Flink 面试指南(2)[157]\n  * 3. 程序员如何让自己 Be Cloud Native - 配置篇(2)[158]\n  * 4. 每日站会怎么开才好？——你的站会姿势正确吗？(2)[159]\n  * 5. 一文带你学会使用YOLO及Opencv完成图像及视频流目标检测（上）|附源码(2)[160]\n\n\n##",
        " 推荐排行榜[161]\n  * 1. 阿里10年：一个普通技术人的成长之路(9)[162]\n  * 2. 与“十“俱进 阿里数据库运维10年演进之路(9)[163]\n  * 3. 12亿行代码，阿里巴巴这一年的技术报告和梦想报告(5)[164]\n  * 4. Alibaba Cluster Data 开放下载：270GB 数据揭秘你不知道的阿里巴巴数据中心(3)[165]\n  * 5. RocketMQ 事件驱动：云时代的事件驱动有啥不同？(2)[166]\n\n\n##",
        "最新评论[167]\n  * 1. Re:RocketMQ 之 IoT 消息解析：物联网需要什么样的消息技术?[168]\n  * good\n  * --桃子先森\n  * 2. Re:理论与实践：如何写好一个方法[169]\n  * 常读常新\n  * --从零开始的程序员生活\n  * 3. Re:洞察设计模式的底层逻辑[170]\n  * 常读常新\n  * --从零开始的程序员生活\n  * 4. Re:Linux系统诊断-内存基础[171]\n  * vm.oom_kill_allocating_task (Linux 2.6.24+支持) 如果设置为0，OOM killer会扫描进程列表，选择一个进程来杀死。通常都会选择消耗内存内存最多的进程，杀...\n  * --xiaohuazi\n  * 5. Re:资源预测数字模型搭建思路分享[172]\n  * 你好，请问这个资源预测模板想生成别的月份的信息，应该怎么操作呢\n  * --太爱帅帅怪我咯\n\n\nCopyright © 2025 阿里云云栖号   \nPowered by .NET 9.0 on Kubernetes\n点击右上角即可分享\n微信分享提示\nAI原生IDE[173]"
    ],
    "contents": [
        " 发布于 2024-05-23 17:17 - Spring AI 抢先体验，5 分钟玩转 Java AI 应用开发[32]\nSpring Cloud Alibaba AI 以 Spring AI 为基础，并在此基础上提供阿里云通义系列大模型全面适配，让用户在 5 分钟内开发基于通义大模型的 Java AI 应用。 \nSpring AI 是 Spring 官方社区项目，旨在简化 Java AI 应用程序开发，让 Java 开发者像使用 Spring 开发普通应用一样开发 AI 应用。\nSpring Cloud Alibaba AI 以 Spring AI 为基础，并在此基础上提供阿里云通义系列大模型全面适配，让用户在 5 分钟内开发基于通义大模型的 Java AI 应用。\n[33]\nSpring AI x 通义千问 Demo 已上线至 sca.aliyun.com\n#",
        "Spring AI 简介\n据 Spring AI 官网描述，该项目的灵感来自著名的 Python 项目，如 LangChain 和 LlamaIndex，但 Spring AI 并不是这些项目的直接复制。Spring AI 相信下一波 Generative AI 生成式应用程序将不仅面向 Python 开发人员，而且将在许多编程语言中广泛应用。\nSpring AI 的核心是提供抽象，作为开发 Java AI 应用程序的基础，提供以下功能：\n  * 提供多种大模型服务对接能力，包括业界大多数主流大模型服务等；\n  * 支持灵活的 Prompt Template 和模型输出解析 Output Parsing 能力;\n  * 支持多模态的生成式 AI 能力，如对话，文生图、文生语音等；\n  * 提供通用的可移植的 API 以访问各类模型服务和 Embedding 服务，支持同步和流式调用，同时也支持传递特定模型的定制参数；\n  * 支持 RAG 能力的基础组件，包括 DocumentLoader、TextSpillter、EmobeddingClient、VectorStore 等；\n  * 支持 AI Spring Boot Starter 实现配置自动装配。\n\n\n#",
        "体验第一个 Spring AI 应用开发\n本项目演示如何使用 spring-cloud-starter-alibaba-ai 完成一个在线聊天 AI 应用，底层使用通义千问提供的模型服务。可在此查看完整示例源码[3]。\n##",
        "开发聊天对话应用\n1. 在项目 pom.xml 中加入 2023.0.1.0 版本 Spring Cloud Alibaba 依赖：\n```\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>com.alibaba.cloud</groupId>\n      <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n      <version>2023.0.1.0</version>\n      <type>pom</type>\n      <scope>import</scope>\n     </dependency>\n   </dependencies>\n</dependencyManagement>\n\n<dependencies>\n  <dependency>\n      <groupId>com.alibaba.cloud</groupId>\n      <artifactId>spring-cloud-starter-alibaba-ai</artifactId>\n  </dependency>\n</dependencies>\n```\n\n2. 在 application.yml 配置文件中加入以下配置：\n```\nspring:\n  cloud:\n    ai:\n      tongyi:\n        chat:\n          options:\n            ",
        "Replace the following key with a valid API-KEY.\n            api-key: sk-a3d73b1709bf4a178c28ed7c8b3b5axx\n```\n\n3. 编写聊天服务实现类，由 Spring AI 自动注入 ChatClient、StreamingChatClient，ChatClient 屏蔽底层通义大模型交互细节。\n```\n@Service\npublic class TongYiSimpleServiceImpl extends AbstractTongYiServiceImpl {\n\n  private final ChatClient chatClient;\n\n  private final StreamingChatClient streamingChatClient;\n\n  @Autowired\n  public TongYiSimpleServiceImpl(ChatClient chatClient, StreamingChatClient streamingChatClient) {\n    this.chatClient = chatClient;\n    this.streamingChatClient = streamingChatClient;\n  }\n}\n```\n\n4. 提供具体聊天逻辑实现\n```\n@Service\npublic class TongYiSimpleServiceImpl extends AbstractTongYiServiceImpl {\n\n  // ......\n\n  @Override\n  public String completion(String message) {\n\n    Prompt prompt = new Prompt(new UserMessage(message));\n\n    return chatClient.call(prompt).getResult().getOutput().getContent();\n  }\n\n  @Override\n  public Map<String, String> streamCompletion(String message) {\n\n    StringBuilder fullContent = new StringBuilder();\n\n    streamingChatClient.stream(new Prompt(message))\n        .flatMap(chatResponse -> Flux.fromIterable(chatResponse.getResults()))\n        .map(content -> content.getOutput().getContent())\n        .doOnNext(fullContent::append)\n        .last()\n        .map(lastContent -> Map.of(message, fullContent.toString()))\n        .block();\n\n    log.info(fullContent.toString());\n\n    return Map.of(message, fullContent.toString());\n  }\n\n}\n```\n\n5. 编写 Spring 入口类并启动应用\n```\n@SpringBootApplication\npublic class TongYiApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(TongYiApplication.class);\n  }\n}\n```\n\n至此，便完成了最简单的聊天 AI 应用开发，与普通的 Spring Boot 应用开发步骤完全一致！\n##",
        "验证应用效果\n启动应用后，可通过如下两种方式验证应用效果。\n方式一\n浏览器地址栏输入： _[36]\n返回如下响应：\n```\n{\n    \"Tell me a joke\": \"Sure, here's a classic one for you:\\n\\nWhy was the math book sad?\\n\\nBecause it had too many problems.\\n\\nI hope that made you smile! If you're looking for more, just let me know.\"\n}\n```\n\n方式二\n进入 resources/static 目录下，使用浏览器打开 index.html 文件，输入问题，即可获得输出响应（确保 api-key 有效）：\n[35]\n##",
        "公告\n昵称： 阿里云云栖号[82]   \n园龄： 入园时间：2018-09-05 - 6年7个月[83]   \n粉丝： 136[84]   \n关注： 0[85]\njavascript:void\\(0\\) - +加关注\n|  javascript:void\\(0\\); - < | 2025年4月 |  javascript:void\\(0\\); - >  \n---|---|---  \n日 | 一 | 二 | 三 | 四 | 五 | 六  \n30 | 31 |  1  |  2  |  3  |  4  |  5   \n6  |  7  |  8  |  9  |  10  |  11  |  12   \n13  |  14  |  15  |  16  |  17  |  18  |  19   \n20  |  21  |  22  |  23  |  24  |  25  |  26   \n27  |  28  |  29  |  30  |  1  |  2  |  3   \n4  |  5  |  6  |  7  |  8  |  9  |  10   \n##",
        "搜索\n##"
    ]
}